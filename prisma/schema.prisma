generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Class {
  HO
  PING
}

enum TransactionStatus {
  PENDING
  APPROVED
  PARTIALLY_APPROVED
  REJECTED
  REIMBURSED
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  studentId     String      @unique
  grade         Int
  class         Class
  number        Int
  englishName   String?
  chineseName   String?
  password      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accountType   AccountType @relation(fields: [accountTypeId], references: [id], onDelete: SetDefault)
  accountTypeId Int         @default(1)
  roles         Role[]

  attendance    Attendance[]
  rsvp          RSVP[]
  allowedEvents Event[]
  transactions  Transaction[]
  finance_events FinanceEvents[]
}

model AccountType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String   @default("blue")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Role {
  id Int @id @default(autoincrement())

  priority Int @default(0)

  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  color String @default("blue")

  allowViewEvent   Boolean @default(true)
  allowCreateEvent Boolean @default(false)
  allowEditEvent   Boolean @default(false)

  allowViewAllInfo Boolean @default(false)
  allowCreateUser  Boolean @default(false)
  allowEditUser    Boolean @default(false)

  allowViewFinances Boolean @default(false)
  allowViewAllFinances Boolean @default(false)
  allowCreateTransaction Boolean @default(false)
  allowEditTransaction Boolean @default(false)
  allowApproveTransaction Boolean @default(false)
  allowReimburseTransaction Boolean @default(false)

  @@map("roles")
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  color       String   @default("blue")
  startAt     DateTime
  endAt       DateTime

  useAttendance     Boolean      @default(false)
  attendance        Attendance[]
  attendanceTimeout Int?         @default(15)

  useRSVP      Boolean @default(false)
  rsvp         RSVP[]
  allowedUsers User[]
  rsvpBefore   Int?    @default(3)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    Int
  checkInAt  DateTime
  checkOutAt DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RSVP {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  confirmed Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  title       String
  description String?

  attachments String[]

  amount Float
  currency String @default("NTD")

  events FinanceEvents[]

  status TransactionStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinanceEvents {
  id Int @id @default(autoincrement())

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int

  eventType String
  message   String

  attachments String[]

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
